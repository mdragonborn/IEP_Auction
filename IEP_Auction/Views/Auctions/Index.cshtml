@model IEnumerable<IEP_Auction.Models.Auction>

@{
    ViewBag.Title = "Auctions";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<span id="timerLabel" runat="server"></span>
<link href="~/Content/styles.css" rel="stylesheet" type="text/css" />
<script type="text/javascript">

    function countdown() {
        var timeElements = document.getElementsByClassName("times");
        console.log(timeElements);
        for (var el of timeElements) {
            let timeLeft = Date.parse(el.attributes[2].nodeValue) - new Date()
            if (timeLeft < 0) continue;
            let seconds = timeLeft % 60000 / 1000;
            let secondsStr = parseInt(seconds).toString();
            if (seconds < 10)
                secondsStr = "0" + secondsStr;
            let element = document.getElementById(el.attributes[1].nodeValue).innerHTML =
                ((timeLeft/3600000<10)?"0":"") +parseInt(timeLeft / 3600000, 10).toString() + ":" + parseInt((timeLeft % 3600000) / 60000, 10).toString()
                + ":" + secondsStr;
        }
    }

    setInterval(countdown, 1000);

</script>

<h2>Auctions</h2>

<div id="alert-placeholder"></div>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<p>
    @using (Html.BeginForm())
    {


    }
<p>Page @ViewBag.pageNumber out of @ViewBag.pageCount</p>

@using (Html.BeginForm())
{
    <p>
        @Html.TextBox("page", ViewBag.pageNumber != null ? (int)ViewBag.pageNumber : 1, new { type = "number", value = ViewBag.pageNumber })
        <input type="submit" value="Go to page" />
    </p>
    <p>
        Find by name: @Html.TextBox("SearchString", (string)ViewBag.prevString)
    </p>
        <p>
            Auction state:
            <select name="auctionState">
                <option value="" @{if (ViewBag.selectedState == "") { <text> selected="selected" </text>   }}>Any</option>
                <option value="READY" @{if (ViewBag.selectedState == "READY") { <text> selected="selected" </text>   }}>Ready</option>
                <option value="OPENED" @{if (ViewBag.selectedState == "OPENED") { <text> selected="selected" </text>   }}>Opened</option>
                <option value="COMPLETED" @{if (ViewBag.selectedState == "COMPLETED") { <text> selected="selected" </text>   }}>Completed</option>
            </select>
        </p>
        <p>
            Min price: @Html.TextBox("minPrice", ViewBag.prevMin != null ? (int)ViewBag.prevMin : 0, new { type = "number", placeholder = 0 })
            Max price: @Html.TextBox("maxPrice", ViewBag.prevMax != null ? (int)ViewBag.prevMax : 0, new { type = "number", placeholder = 0 })
        </p>
        <input type="submit" value="Search" style="margin-bottom: 10px" />
    }
@if(Model.Count() == 0)
{
    <h4>No auctions could be found.</h4>
}
<div style="display:grid; grid-template-columns: 1fr 1fr 1fr;">
    @foreach (var item in Model)
    {
        <div class="auctionItem">
            <div class="auctionTitle">
                @Html.DisplayFor(modelItem => item.Name)
            </div>
            <div class="auctionDesc">
                <img src=@Html.DisplayFor(modelItem => item.ImagePath) height="140">
                <p>@Html.DisplayFor(modelItem => item.Status)</p>
                <p class="times" id=@(item.Id.ToString().ToLower()) 
                   timeLeft=@(item.TimeEnd.HasValue? item.TimeEnd.Value.ToString("yyyy-MM-dd'T'HH:mm:ss zzz") : "0:0:0")>
                @if (item.TimeEnd > DateTime.Now)
                {
                    @((item.TimeEnd - DateTime.Now).ToString().Split('.')[0])
                }
                else
                {
                    <text>00:00:00</text>
                }
                </p>
                <p>
                    @((ViewBag.currencyValue * item.Bid.Amount).ToString()) @ViewBag.currencySymbol
                </p>
                <p>
                    Last bidder:
                    <span id=@("bidder"+item.Id.ToString().ToLower())>@Html.DisplayFor(modelItem => item.Bid.AspNetUser.Email)</span>
                </p>
            </div>
            <div class="auctionControl">
                @Html.ActionLink("Details", "Details", new { id = item.Id })
                @if (item.Status == "OPENED" && item.TimeEnd > DateTime.Now)
                {
                    <text>|</text> @Html.ActionLink("Bid", "Bid", new { guid = item.Id })
                }
                @if (Request.IsAuthenticated)
                {
                    if (User.IsInRole("Admin") || ViewBag.UserId == (item.CreatorId))
                    {
                        <text>|</text> @Html.ActionLink("Edit", "Edit", new { id = item.Id }) <text>|</text>
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id });
    }
                }
            </div>

        </div>

    }
</div>


@*
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            Image
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Bid.Amount)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Status)
        </th>
        <th>
            Time left
        </th>
        <th>
            @Html.DisplayNameFor(model => model.AspNetUser.Email)
        </th>
        <th>
            Start time
        </th>
        <th>
            End Time
        </th>
        <th></th>
    </tr>



    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                <img src=@Html.DisplayFor(modelItem => item.ImagePath) height="140">
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Bid.Amount)
            </td>
            <td>
                @if (item.TimeEnd == null & item.TimeEnd <= DateTime.Now)
                {
                    <span>CLOSED</span>
                }
                else
                {
                    @Html.DisplayFor(modelItem => item.Status)

                }
            </td>
            <td>
                @if (item.TimeEnd > DateTime.Now)
                {
                    @(item.TimeEnd - DateTime.Now)
                }
                else
                {
                    @(new TimeSpan(0))
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AspNetUser.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TimeStart)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TimeEnd)
            </td>
            <td>
                @Html.ActionLink("Details", "Details", new { id = item.Id })<br />
                @if (item.Status == "OPENED" && item.TimeEnd > DateTime.Now)
                {
                    @Html.ActionLink("Bid", "Bid", new { guid = item.Id })<br />
                }
                @if (Request.IsAuthenticated)

                {
                    if (User.IsInRole("Admin") || ViewBag.UserId == (item.CreatorId))
                    {
                        @Html.ActionLink("Edit", "Edit", new { id = item.Id });<br />
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id });
                    }
                }

            </td>
        </tr>
    }
    *@

    @section Scripts{
        <script src="~/Scripts/jquery.signalR-2.4.0.js"></script>
        <script src="~/SignalR/Hubs"></script>
        <script type="text/javascript">
            function htmlEncode(value) {
                return $('<div />').text(value).html();
            }

            //execute on document ready
            $(function () {
                //function that the hub can call when it receives a notification.
                $.connection.notificationHub.client.displayNotification = function (update, alertType) {
                    //Create the bootstrap alert html
                    var jsonUpdate = JSON.parse(update);
                    var alertHtml = '<div class="alert alert-dismissible" role="alert"><button type="button" class="close" data-dismiss="alert"><span>×</span></button><strong>' + htmlEncode(jsonUpdate.price) + '</strong> ' + htmlEncode(htmlEncode(jsonUpdate.user)) + ' ' + htmlEncode(jsonUpdate.price) + '</div>';
                    $(alertHtml)
                      .hide()                           //hide the newly created element (this is required for fadeIn to work)
                      .appendTo('#alert-placeholder')   //add it to the palceholder in the page
                      .fadeIn(500);                     //little flair to grab user attention
                };

                window.notifyApp = {
                    hubConnector: $.connection.hub.start()  //start the connection and store object returned globally for access in child views
                };

            });
        </script>
    }

</table>
